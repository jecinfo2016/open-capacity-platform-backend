<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.open.capacity</groupId>
    <artifactId>business-center</artifactId>
    <version>2.0.1</version>
  </parent>
  <artifactId>file-center</artifactId>
  <description>文件中心</description>

	<properties>
		<encoding>UTF-8</encoding>
		<maven.compiler.target>1.8</maven.compiler.target>
		<maven.compiler.source>1.8</maven.compiler.source>
	</properties>

  <dependencies>

	  <!--markdown to html-->
	  <dependency>
		  <groupId>com.vladsch.flexmark</groupId>
		  <artifactId>flexmark</artifactId>
		  <version>0.26.4</version>
	  </dependency>
	  <dependency>
		  <groupId>com.vladsch.flexmark</groupId>
		  <artifactId>flexmark-util</artifactId>
		  <version>0.26.4</version>
	  </dependency>
	  <!--表格渲染插件-->
	  <dependency>
		  <groupId>com.vladsch.flexmark</groupId>
		  <artifactId>flexmark-ext-tables</artifactId>
		  <version>0.26.4</version>
	  </dependency>

	  <dependency>
	  <groupId>org.apache.httpcomponents</groupId>
	  <artifactId>httpclient</artifactId>
	  <version>4.5.2</version>
  </dependency>
	<dependency>
		<groupId>org.apache.httpcomponents</groupId>
		<artifactId>fluent-hc</artifactId>
		<version>4.5.2</version>
	</dependency>

  		<!-- 关系型数据库配置 -->
	 	<dependency>
  			<groupId>com.open.capacity</groupId>
  			<artifactId>db-spring-boot-starter</artifactId>
  		</dependency>
  		
  		<!-- 非关系型数据库配置 -->
  		<dependency>
  			<groupId>com.open.capacity</groupId>
  			<artifactId>redis-spring-boot-starter</artifactId>
  		</dependency>
  		
  		<!-- 日志中心配置 -->
		<dependency>
  			<groupId>com.open.capacity</groupId>
  			<artifactId>log-spring-boot-starter</artifactId>
  		</dependency>
  		
  		<!-- 公共实体配置 -->
  		<dependency>
  			<groupId>com.open.capacity</groupId>
  			<artifactId>common-spring-boot-starter</artifactId>
  		</dependency>
  		
  		<!-- 资源服务器配置 -->
  		<dependency>
  			<groupId>com.open.capacity</groupId>
  			<artifactId>uaa-client-spring-boot-starter</artifactId>
  		</dependency>
		
		<!-- API文档配置 -->
		<dependency>
  			<groupId>com.open.capacity</groupId>
  			<artifactId>swagger-spring-boot-starter</artifactId>
  		</dependency>

		<!-- WEB守护进程启动springboot -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

	
 		<!-- spring boot 端点监控 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>
 
		<!--
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-zipkin</artifactId>
		</dependency>
		 -->
		 

		<!-- https://mvnrepository.com/artifact/com.aliyun.oss/aliyun-sdk-oss -->
		<dependency>
			<groupId>com.aliyun.oss</groupId>
			<artifactId>aliyun-sdk-oss</artifactId>
			<version>2.8.3</version>
		</dependency>

		<!-- 七牛依赖 -->
		<dependency>
			<groupId>com.qiniu</groupId>
			<artifactId>qiniu-java-sdk</artifactId>
			<version>[7.2.0, 7.2.99]</version>
		</dependency>
		
		
		<!-- fastDFS -->
        <dependency>
            <groupId>com.github.tobato</groupId>
            <artifactId>fastdfs-client</artifactId>
            <version>1.26.5</version>
        </dependency>
		
		<!-- 选用eureka时打开-->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>
	  <dependency>
		  <groupId>org.apache.hadoop</groupId>
		  <artifactId>hadoop-common</artifactId>
		  <version>2.5.1</version>
	  </dependency>
	  <dependency>
		  <groupId>org.apache.hbase</groupId>
		  <artifactId>hbase-common</artifactId>
		  <version>1.3.1</version>
		  <exclusions>
			  <exclusion>
				  <groupId>log4j</groupId>
				  <artifactId>log4j</artifactId>
			  </exclusion>
			  <exclusion>
				  <groupId>org.slf4j</groupId>
				  <artifactId>slf4j-log4j12</artifactId>
			  </exclusion>
			  <exclusion>
				  <groupId>io.netty</groupId>
				  <artifactId>netty-all</artifactId>
			  </exclusion>
		  </exclusions>
	  </dependency>
	  <dependency>
		  <groupId>org.apache.hbase</groupId>
		  <artifactId>hbase-client</artifactId>
		  <version>1.3.1</version>
		  <exclusions>
			  <exclusion>
				  <groupId>log4j</groupId>
				  <artifactId>log4j</artifactId>
			  </exclusion>
			  <exclusion>
				  <groupId>org.slf4j</groupId>
				  <artifactId>slf4j-log4j12</artifactId>
			  </exclusion>
			  <exclusion>
				  <groupId>io.netty</groupId>
				  <artifactId>netty-all</artifactId>
			  </exclusion>
		  </exclusions>
	  </dependency>
	  <dependency>
		  <groupId>org.springframework.data</groupId>
		  <artifactId>spring-data-hadoop</artifactId>
		  <version>2.5.0.RELEASE</version>
		  <exclusions>
			  <exclusion>
				  <groupId>javax.servlet.jsp</groupId>
				  <artifactId>jsp-api</artifactId>
			  </exclusion>
			  <exclusion>
				  <groupId>javax.servlet</groupId>
				  <artifactId>servlet-api</artifactId>
			  </exclusion>
		  </exclusions>
	  </dependency>
	  <dependency>
		  <groupId>log4j</groupId>
		  <artifactId>log4j</artifactId>
		  <version>1.2.17</version>
	  </dependency>
	  <!--公共的库-->
	  <dependency>
		  <groupId>commons-codec</groupId>
		  <artifactId>commons-codec</artifactId>
	  </dependency>
	  <dependency>
		  <groupId>org.apache.commons</groupId>
		  <artifactId>commons-io</artifactId>
		  <version>1.3.2</version>
	  </dependency>
	  <dependency>
		  <groupId>cn.hutool</groupId>
		  <artifactId>hutool-all</artifactId>
		  <version>4.2.1</version>
	  </dependency>
	  <dependency>
		  <groupId>com.alibaba</groupId>
		  <artifactId>fastjson</artifactId>
		  <version>1.2.47</version>
	  </dependency>
	  <dependency>
		  <groupId>com.google.protobuf</groupId>
		  <artifactId>protobuf-java</artifactId>
		  <version>2.6.0</version>
	  </dependency>
      <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-test</artifactId>
      </dependency>

  </dependencies>


	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>Greenwich.RELEASE</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<!--形成带第三方jar包的可执行jar包，jar包目录结构如下 application.properties lib META-INF mybatisorg -->
	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>


			<!-- 首先加入pom ${docker.image.prefix} ： 这个是你的dockerhub注册上面的名字 gitgeek 这个是我注册的 
				${project.artifactId} ： 项目的名称 dockerDirectory ： dockerfile的文件路径 -->
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.4.13</version>
				<configuration>
					<imageName>${docker.image.prefix}/${project.artifactId}</imageName>
					<dockerDirectory>src/main/docker</dockerDirectory>
					<!-- docker远程服务器地址 -->
					<dockerHost>${docker.host}</dockerHost>
					<resources>
						<resource>
							<targetPath>/</targetPath>
							<directory>${project.build.directory}</directory>
							<include>${project.build.finalName}.jar</include>
						</resource>
					</resources>
				</configuration>
			</plugin>
		</plugins>
		<finalName>${project.artifactId}</finalName>
	</build>

  
</project>